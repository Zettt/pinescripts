// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Zettt
// 2021

//@version=6
indicator('Peak Reversal v2', shorttitle = 'Peak Reversal v2', overlay = true)

showOnlyFirstSignal = input.bool(title = 'Show Only First Signal', defval = true, tooltip = 'If checked, only the first signal after a reset will be shown.')
keltnerEMAlength = input.int(title = 'Keltner Channel EMA Length', defval = 21, minval = 1, tooltip = 'The length of the EMA used for the Keltner Channels.')
innerBandMultiplier = input.float(title = 'Inner Band Multiplier', defval = 1.125, minval = 0.1, step = 0.125)
outerBandMultiplier = input.float(title = 'Outer Band Multiplier', defval = 2.25, minval = 0.1, step = 0.125)
showMeanEMA = input.bool(title = 'Show Mean EMA?', defval = false, tooltip = 'Will plot the Channel EMA (mean) in the middle of the bands.')
showInnerBand = input.bool(title = 'Show Inner Band?', defval = true)
showOuterBand = input.bool(title = 'Show Outer Band?', defval = false)
showDeviations = input.bool(title = 'Show Mean Deviations?', defval = true, tooltip = 'Indicates when a candle starts going outside the bands.')
showBandCross = input.bool(title = 'Show Band Crosses?', defval = true, tooltip = 'Show when candles cross bands.')
showFreeBars = input.bool(title = 'Show Free Bars?', defval = false, tooltip = 'Highlights bars where the entire candle is outside of the selected band, which can indicate extreme momentum.')
signalBand = input.string(title = 'Signal Band', defval = 'Outer', options = ['Inner', 'Outer'], tooltip = 'Which of the bands will be used for all signal calculations.')
signalSource = input.string(title = 'Signal Source', defval = 'Wick', options = ['Wick', 'Close'], tooltip = 'Choose the source for cross signals: "Wick" (high/low) or "Close". Free Bars will not be affected.')

// calculate Keltner bands
[innerKeltnerMA, upInnerKeltnerBand, downInnerKeltnerBand] = ta.kc(close, keltnerEMAlength, innerBandMultiplier)
[outerKeltnerMA, upOuterKeltnerBand, downOuterKeltnerBand] = ta.kc(close, keltnerEMAlength, outerBandMultiplier)


// plot bands
plot(showMeanEMA ? innerKeltnerMA : na, title = 'Keltner Channel EMA (Mean)', color = color.new(#BB6083, 40), linewidth = 1)
plot(showInnerBand ? upInnerKeltnerBand : na, title = 'Inner Upper Band', color = color.new(#DD8EAD, 30), linewidth = 1)
plot(showInnerBand ? downInnerKeltnerBand : na, title = 'Inner Lower Band', color = color.new(#DD8EAD, 30), linewidth = 1)
plot(showOuterBand ? upOuterKeltnerBand : na, title = 'Outer Upper Band', color = color.new(#DD8EAD, 40), linewidth = 1)
plot(showOuterBand ? downOuterKeltnerBand : na, title = 'Outer Lower Band', color = color.new(#DD8EAD, 40), linewidth = 1)

// plot mean deviations
// outside the upper band
firstFreeBarUp = if signalBand == 'Inner'
    high <= upInnerKeltnerBand and close <= upInnerKeltnerBand
else if signalBand == 'Outer'
    high <= upOuterKeltnerBand and close <= upOuterKeltnerBand
numFreeBarsUp = ta.barssince(firstFreeBarUp)

color colorBarUp = na

if numFreeBarsUp > 5
    colorBarUp := #b71c1c
    colorBarUp
else if numFreeBarsUp > 2
    colorBarUp := #ef5350
    colorBarUp
else if numFreeBarsUp > 0
    colorBarUp := #ef9a9a
    colorBarUp
else
    colorBarUp := na
    colorBarUp

barcolor(showDeviations ? colorBarUp : na, title = 'Mean Deviations Up')

// outside lower band
firstFreeBarDown = if signalBand == 'Inner'
    low >= downInnerKeltnerBand and close >= downInnerKeltnerBand
else if signalBand == 'Outer'
    low >= downOuterKeltnerBand and close >= downOuterKeltnerBand
numFreeBarsDown = ta.barssince(firstFreeBarDown)

color colorBarDown = na

if numFreeBarsDown > 5
    colorBarDown := #1b5e20
    colorBarDown
else if numFreeBarsDown > 2
    colorBarDown := #66bb6a
    colorBarDown
else if numFreeBarsDown > 0
    colorBarDown := #a5d6a7
    colorBarDown
else
    colorBarDown := na
    colorBarDown

barcolor(showDeviations ? colorBarDown : na, title = 'Mean Deviations Down')


// Plot band crosses

longCrossCandle = signalSource == 'Wick' ? high : close
shortCrossCandle = signalSource == 'Wick' ? low : close

longCross = if barstate.isconfirmed
    if signalBand == 'Inner'
        longCrossCandle >= upInnerKeltnerBand
    else if signalBand == 'Outer'
        longCrossCandle >= upOuterKeltnerBand
else
    false

shortCross = if barstate.isconfirmed
    if signalBand == 'Inner'
        shortCrossCandle <= downInnerKeltnerBand
    else if signalBand == 'Outer'
        shortCrossCandle <= downOuterKeltnerBand
else
    false

showlongCross = showOnlyFirstSignal ? longCross and not longCross[1] : longCross
showshortCross = showOnlyFirstSignal ? shortCross and not shortCross[1] : shortCross

upTriangleShape = shape.triangledown
upTriangleColor = color.new(#e57373, 50)
downTriangleShape = shape.triangleup
downTriangleColor = color.new(#81c784, 50)

plotshape(showBandCross ? showlongCross : false, title = 'Normal Band Cross Up', style = upTriangleShape, size = size.tiny, color = upTriangleColor, location = location.abovebar)
plotshape(showBandCross ? showshortCross : false, title = 'Normal Band Cross Down', style = downTriangleShape, size = size.tiny, color = downTriangleColor, location = location.belowbar)

// Plot free bars breakouts
longFreeBar = if signalBand == 'Inner'
    low >= upInnerKeltnerBand
else if signalBand == 'Outer'
    low >= upOuterKeltnerBand
shortFreeBar = if signalBand == 'Inner'
    high <= downInnerKeltnerBand
else if signalBand == 'Outer'
    high <= downOuterKeltnerBand

upStarColor = color.new(#e57373, 50)
downStarColor = color.new(#81c784, 50)

plotchar(showFreeBars ? longFreeBar : false, title = 'Free Bar Up', char = '★', size = size.tiny, color = upStarColor, location = location.abovebar) //, display=display.none)
plotchar(showFreeBars ? shortFreeBar : false, title = 'Free Bar Down', char = '★', size = size.tiny, color = downStarColor, location = location.belowbar) //, display=display.none)
