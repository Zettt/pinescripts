// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Zettt
// 2021

//@version=6
indicator('Peak Reversal v3', shorttitle = 'Peak Reversal', overlay = true)

//
// INPUTS
//
// Keltner Channel Settings
group_keltner = "Keltner Channel Settings"
maType = input.string(title = 'MA Type', defval = 'EMA', options = ['EMA', 'SMA', 'RMA', 'VMA', 'HMA'], tooltip = 'The type of moving average to use for the Keltner Channel basis.', group = group_keltner, inline = "1")
keltnerEMAlength = input.int(title = 'MA Length', defval = 20, minval = 1, tooltip = 'The length of the MA used for the Keltner Channels.', group = group_keltner, inline = "1")
atrLength = input.int(title = 'ATR Length', defval = 14, minval = 1, tooltip = 'The length of the ATR used for the Keltner Channels.', group = group_keltner, inline = "2")
innerBandMultiplier = input.float(title = 'Inner', defval = 2, minval = 0.1, step = 0.25, group = group_keltner, inline = "3", tooltip = "Multiplier for the inner band")
outerBandMultiplier = input.float(title = 'Outer', defval = 3, minval = 0.1, step = 0.25, group = group_keltner, inline = "3", tooltip = "Multiplier for the outer band")

// Display Settings
group_display = "Display Settings"
showMeanEMA = input.bool(title = 'Show Mean EMA?', defval = true, tooltip = 'Will plot the Channel EMA (mean) in the middle of the bands.', group = group_display, inline = "1")
showInnerBand = input.bool(title = 'Inner Band?', defval = true, group = group_display, inline = "2")
showOuterBand = input.bool(title = 'Outer Band?', defval = false, group = group_display, inline = "2")
showDeviations = input.bool(title = 'Show Mean Deviations?', defval = true, tooltip = 'Indicates when candles start going outside the bands. The more candles outside the bands, the likelier a return to the mean becomes.', group = group_display, inline = "3")

// Signal Settings
group_signals = "Signal Settings"
showOnlyFirstSignal = input.bool(title = 'Show Only First Signal', defval = true, tooltip = 'If checked, only the first signal after a reset will be shown.', group = group_signals)
showBandCross = input.bool(title = 'Band Crosses?', defval = true, tooltip = 'Show when candles cross bands.', group = group_signals, inline = "1")
showFreeBars = input.bool(title = 'Free Bars?', defval = false, tooltip = 'Highlights bars where the entire candle is outside of the selected band, which can indicate extreme momentum.', group = group_signals, inline = "1")
signalBand = input.string(title = 'Signal Band', defval = 'Inner', options = ['Inner', 'Outer'], tooltip = 'Which of the bands will be used for all signal calculations.', group = group_signals, inline = "2")
signalSource = input.string(title = 'Signal Source', defval = 'Wick', options = ['Wick', 'Close'], tooltip = 'Choose the source for cross signals: "Wick" (high/low) or "Close". Free Bars will not be affected.', group = group_signals, inline = "2")

// Momentum Coloring
group_coloring = "Momentum Coloring"
maxMomentumBars = input.int(title = 'Max Momentum Bars', defval = 5, minval = 1, tooltip = 'The number of bars at which momentum coloring reaches its peak intensity. After this many bars, the color will stay constant.', group = group_coloring)
upMomentumColor = input.color(title = 'Up', defval = color.new(#ee5e48, 0), tooltip = 'Base color for upward momentum signals.', group = group_coloring, inline = "1")
downMomentumColor = input.color(title = 'Down', defval = color.new(#25bc3e, 0), tooltip = 'Base color for downward momentum signals.', group = group_coloring, inline = "1")

// Squeeze Detector
group_squeeze = "Squeeze Detector"
showSqueeze = input.bool(title = 'Show Squeeze?', defval = true, tooltip = 'Highlights periods of low volatility (a "squeeze"), which can often precede significant price movements.', group = group_squeeze)
squeezeLength = input.int(title = 'Lookback', defval = 200, minval = 1, tooltip = 'The historical lookback period for calculating the bandwidth percentile rank.', group = group_squeeze, inline = "1")
squeezeThresh = input.float(title = 'Percentile', defval = 5.0, minval = 0.1, maxval = 100.0, step = 0.1, tooltip = 'The percentile threshold below which a squeeze is triggered. For example a value of 5 means the squeeze is active when bandwidth is in the bottom 5% of its historical range.', group = group_squeeze, inline = "1")
squeezeColorInput = input.color(title = 'Squeeze Color', defval = color.new(color.gray, 60), tooltip = 'Color for the squeeze intensity. A gradient will be applied.', group = group_squeeze)

// Calculate Keltner Bands
float basis = switch maType
    'EMA' => ta.ema(close, keltnerEMAlength)
    'SMA' => ta.sma(close, keltnerEMAlength)
    'RMA' => ta.rma(close, keltnerEMAlength)
    'VMA' => ta.vwma(close, keltnerEMAlength)
    'HMA' => ta.hma(close, keltnerEMAlength)
    => na

atrRange = ta.atr(atrLength)
upInnerKeltnerBand = basis + atrRange * innerBandMultiplier
downInnerKeltnerBand = basis - atrRange * innerBandMultiplier
upOuterKeltnerBand = basis + atrRange * outerBandMultiplier
downOuterKeltnerBand = basis - atrRange * outerBandMultiplier


// Plot Bands
plot(showMeanEMA ? basis : na, title = 'Keltner Channel EMA (Mean)', color = color.new(#BB6083, 40), linewidth = 1)
p1 = plot(showInnerBand ? upInnerKeltnerBand : na, title = 'Inner Upper Band', color = color.new(#DD8EAD, 30), linewidth = 1)
p2 = plot(showInnerBand ? downInnerKeltnerBand : na, title = 'Inner Lower Band', color = color.new(#DD8EAD, 30), linewidth = 1)
p3 = plot(showOuterBand ? upOuterKeltnerBand : na, title = 'Outer Upper Band', color = color.new(#DD8EAD, 40), linewidth = 1)
p4 = plot(showOuterBand ? downOuterKeltnerBand : na, title = 'Outer Lower Band', color = color.new(#DD8EAD, 40), linewidth = 1)

// Squeeze Calculation
keltnerBandwidth = signalBand == 'Inner' ? (upInnerKeltnerBand - downInnerKeltnerBand) / basis : (upOuterKeltnerBand - downOuterKeltnerBand) / basis

bandwidthRank = ta.percentrank(keltnerBandwidth, squeezeLength)
inSqueeze = bandwidthRank <= squeezeThresh

startColor = color.new(color.black, 100)
squeezeColor = color.from_gradient(bandwidthRank, 0, squeezeThresh, squeezeColorInput, startColor)


fill(p1, p2, color = showSqueeze and inSqueeze and not showOuterBand ? squeezeColor : na, title = 'Inner Band Squeeze Fill')
fill(p3, p4, color = showSqueeze and inSqueeze and showOuterBand ? squeezeColor : na, title = 'Outer Band Squeeze Fill')

// Plot Mean Deviations
// Outside the Upper Band
firstFreeBarUp = if signalBand == 'Inner'
    high <= upInnerKeltnerBand and close <= upInnerKeltnerBand
else if signalBand == 'Outer'
    high <= upOuterKeltnerBand and close <= upOuterKeltnerBand
numFreeBarsUp = ta.barssince(firstFreeBarUp)

color colorBarUp = color.from_gradient(numFreeBarsUp, 0, maxMomentumBars, color.new(upMomentumColor, 80), upMomentumColor)
barcolor(showDeviations and numFreeBarsUp > 0 ? colorBarUp : na, title = 'Mean Deviations Up')

// Outside Lower Band
firstFreeBarDown = if signalBand == 'Inner'
    low >= downInnerKeltnerBand and close >= downInnerKeltnerBand
else if signalBand == 'Outer'
    low >= downOuterKeltnerBand and close >= downOuterKeltnerBand
numFreeBarsDown = ta.barssince(firstFreeBarDown)

color colorBarDown = color.from_gradient(numFreeBarsDown, 0, maxMomentumBars, color.new(downMomentumColor, 80), downMomentumColor)
barcolor(showDeviations and numFreeBarsDown > 0 ? colorBarDown : na, title = 'Mean Deviations Down')


// Plot band crosses
longCrossCandle = signalSource == 'Wick' ? high : close
shortCrossCandle = signalSource == 'Wick' ? low : close

longCross = if barstate.isconfirmed
    if signalBand == 'Inner'
        longCrossCandle >= upInnerKeltnerBand
    else if signalBand == 'Outer'
        longCrossCandle >= upOuterKeltnerBand
else
    false

shortCross = if barstate.isconfirmed
    if signalBand == 'Inner'
        shortCrossCandle <= downInnerKeltnerBand
    else if signalBand == 'Outer'
        shortCrossCandle <= downOuterKeltnerBand
else
    false

showlongCross = showOnlyFirstSignal ? longCross and not longCross[1] : longCross
showshortCross = showOnlyFirstSignal ? shortCross and not shortCross[1] : shortCross

upTriangleShape = shape.triangledown
downTriangleShape = shape.triangleup

plotshape(showBandCross ? showlongCross : false, title = 'Normal Band Cross Up', style = upTriangleShape, size = size.tiny, color = color.new(upMomentumColor, 50), location = location.abovebar)
plotshape(showBandCross ? showshortCross : false, title = 'Normal Band Cross Down', style = downTriangleShape, size = size.tiny, color = color.new(downMomentumColor, 50), location = location.belowbar)

// Plot Free Bars Breakouts
longFreeBar = if signalBand == 'Inner'
    low >= upInnerKeltnerBand
else if signalBand == 'Outer'
    low >= upOuterKeltnerBand
shortFreeBar = if signalBand == 'Inner'
    high <= downInnerKeltnerBand
else if signalBand == 'Outer'
    high <= downInnerKeltnerBand

plotchar(showFreeBars ? longFreeBar : false, title = 'Free Bar Up', char = '★', size = size.tiny, color = color.new(upMomentumColor, 50), location = location.abovebar) //, display=display.none)
plotchar(showFreeBars ? shortFreeBar : false, title = 'Free Bar Down', char = '★', size = size.tiny, color = color.new(downMomentumColor, 50), location = location.belowbar) //, display=display.none)
